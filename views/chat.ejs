<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat Room</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    html,
    body {
      height: 100%;
      margin: 0;
      padding: 0;
    }

    body {
      background-color: #1A3636;
      height: 100%;
      width: 100%;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .wrapper {
      display: flex;
      height: 100vh;
      /* viewport height */
      width: 100vw;
      /* viewport width */
    }

    .message-channels {
      background-color: #f9f9f9;
      border-right: 1px solid #ccc;
      height: 100%;
      width: 15%;
      overflow-y: auto;
    }

    .container2 {
      background-color: #f9f9f9;
      padding: 0;
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      transition: width 0.3s ease;
      width: 100%;
      /* Tam genişliği kapsaması için */
      height: 100vh;
    }

    header {
      background-color: #40534C;
      color: white;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      padding: 20px;
      z-index: 1;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    #toggle-btn {
      background-color: #D6BD98;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 5px;
      transition: background-color 0.3s ease;
    }

    #toggle-btn:hover {
      background-color: #B4A583;
    }

    .main-content {
      display: flex;
      flex-grow: 1;
    }

    #messages {
      flex-grow: 1;
      overflow-y: auto;
      padding: 10px;
      background-color: #f9f9f9;
      height: calc(100vh - 160px);
      /* Başlık ve giriş alanının yüksekliğine göre ayarla */
      box-sizing: border-box;
    }

    #messages::-webkit-scrollbar {
      width: 8px;
    }

    #messages::-webkit-scrollbar-thumb {
      background-color: #aaa;
      border-radius: 4px;
    }

    #messages::-webkit-scrollbar-thumb:hover {
      background-color: #888;
    }

    #messages::-webkit-scrollbar-track {
      background-color: transparent;
    }

    .message-item {
      border-radius: 20px;
      padding: 10px;
      margin-bottom: 10px;
      display: inline-block;
      max-width: 70%;
      clear: both;
      position: relative;
      word-wrap: break-word;
      overflow-wrap: break-word;
    }

    .message-left {
      background-color: #D6BD98;
      float: left;
      margin-left: 10px;
    }

    .message-right {
      background-color: #40534C;
      color: white;
      float: right;
      margin-right: 10px;
    }

    .message-header {
      font-weight: bold;
    }

    .message-content {
      margin-top: 5px;
      margin-bottom: 15px;
      white-space: pre-wrap;
    }

    .message-timestamp {
      font-size: 0.75rem;
      color: rgba(0, 0, 0, 0.5);
      position: absolute;
      right: 10px;
      bottom: 5px;
    }

    .message-right .message-timestamp {
      color: rgba(255, 255, 255, 0.7);
    }

    .online-users {
      background-color: #f9f9f9;
      border-left: 1px solid #ccc;
      height: 100%;
      width: 20%;
      overflow-y: auto;
      padding: 10px;
    }

    .online-user {
      padding: 10px;
      border-radius: 8px;
      margin-bottom: 10px;
      background-color: #e0e0e0;
      color: #333;
      transition: background-color 0.3s, color 0.3s;
      display: flex;
      align-items: center;
    }

    .online-user:hover {
      background-color: #D6BD98;
      color: white;
    }

    .online-user:last-child {
      margin-bottom: 0;
    }

    #input-group {
      display: flex;
      background-color: #f9f9f9;
      box-shadow: 0 -4px 8px rgba(0, 0, 0, 0.1);
      padding: 10px;
      z-index: 1;
    }

    #input {
      flex-grow: 1;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
    }

    #send-btn {
      background-color: #40534C;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 5px;
      margin-left: 10px;
      transition: background-color 0.3s ease;
    }

    #send-btn:hover {
      background-color: #B4A583;
    }
  </style>
</head>

<body>
  <div class="wrapper">
    <div id="message-channels" class="message-channels"></div>
    <div class="container2">
      <header>
        <h2>Mesajlaşma Odası</h2>
        <button id="toggle-btn" class="btn btn-primary">Online Kullanıcılar</button>
      </header>
      <div class="main-content">
        <div id="messages"></div>
        <div id="online-users" class="online-users"></div>
      </div>
      <div id="input-group" class="input-group">
        <input id="input" type="text" autocomplete="off" placeholder="Mesaj yazma alanı" class="form-control" />
        <button id="send-btn" class="btn">Gönder</button>
      </div>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const messagesDiv = document.getElementById('messages');
    const input = document.getElementById('input');
    const sendBtn = document.getElementById('send-btn');
    const onlineUsersDiv = document.getElementById('online-users');
    const toggleBtn = document.getElementById('toggle-btn');
    const wrapper = document.querySelector('.wrapper');
    const container = document.querySelector('.container2');

    let currentUserId;

    function scrollToBottom() {
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    toggleBtn.addEventListener('click', function () {
      if (onlineUsersDiv.style.display === 'none' || onlineUsersDiv.style.display === '') {
        onlineUsersDiv.style.display = 'block';
      } else {
        onlineUsersDiv.style.display = 'none';
      }
    });

    // Sayfa yüklendiğinde online-users div’inin başlangıçta görünür olup olmadığını kontrol et
    document.addEventListener('DOMContentLoaded', function () {
      onlineUsersDiv.style.display = 'block'; // varsayılan olarak görünür
    });

    function getCookie(name) {
      const value = `; ${document.cookie}`;
      const parts = value.split(`; ${name}=`);
      if (parts.length === 2) return parts.pop().split(';').shift();
      console.error(`Cookie with name ${name} not found`);
      return null;
    }

    const token = getCookie('jwt');
    if (!token) {
      console.error('JWT token not found');
      alert('Please log in');
      location.assign(`/`);
    }

    const socket = io({
      transports: ['websocket'],
      auth: {
        token
      }
    });

    socket.on('user connected', (data) => {
      currentUserId = data.userId;
      fetchMessages(); // user connected olayından sonra fetchMessages çağırılıyor
    });

    socket.on('connect_error', (err) => {
      console.error('Socket connection error:', err);
      alert('Lütfen giriş yapınız.');
      location.assign(`/`);
    });

    sendBtn.addEventListener('click', function () {
      if (input.value) {
        socket.emit('chat message', input.value);
        input.value = '';
      }
    });

    socket.on('chat message', function (msg) {
      const item = document.createElement('div');
      item.className = 'message-item';

      const header = document.createElement('div');
      header.className = 'message-header';
      header.innerHTML = `<span>${msg.userName}</span>`;

      const content = document.createElement('div');
      content.className = 'message-content';
      content.textContent = msg.content;

      const timestamp = document.createElement('div');
      timestamp.className = 'message-timestamp';
      timestamp.textContent = new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

      item.appendChild(header);
      item.appendChild(content);
      item.appendChild(timestamp);

      if (msg.userId === currentUserId) {
        item.classList.add('message-right');
      } else {
        item.classList.add('message-left');
      }

      messagesDiv.appendChild(item);

      scrollToBottom();
    });

    async function fetchMessages() {
      if (!currentUserId) {
        console.error('currentUserId is not set');
        return;
      }

      try {
        const response = await fetch('/chat/messages', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        if (response.ok) {
          const responseData = await response.json();
          responseData.data.forEach(msg => {
            const item = document.createElement('div');
            item.className = 'message-item';

            console.log(msg);

            const header = document.createElement('div');
            header.className = 'message-header';
            header.innerHTML = `<span>${msg.user.email.split(`@`)[0]}</span>`;

            const content = document.createElement('div');
            content.className = 'message-content';
            content.textContent = msg.content;

            const timestamp = document.createElement('div');
            timestamp.className = 'message-timestamp';
            timestamp.textContent = new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

            item.appendChild(header);
            item.appendChild(content);
            item.appendChild(timestamp);

            if (msg.user._id === currentUserId) {
              item.classList.add('message-right');
            } else {
              item.classList.add('message-left');
            }

            messagesDiv.appendChild(item);
          });

          scrollToBottom();
        } else if (response.status === 401) {
          alert('Lütfen tekrar giriş yapınız.');
          location.assign(`/`);
        } else {
          console.error('Failed to fetch messages:', response.status);
        }
      } catch (error) {
        console.error('Error fetching messages:', error);
      }
    }

    socket.on('online users', function (users) {
      onlineUsersDiv.innerHTML = '';
      users.forEach(function (user) {
        console.log("Gelen user: " + user.email);
        const userDiv = document.createElement('div');
        userDiv.className = 'online-user';
        userDiv.textContent = user.email.split(`@`)[0];
        console.log("Yüklenen user id: " + user._id);
        onlineUsersDiv.appendChild(userDiv);
      });
    });

  </script>
</body>

</html>
