#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('node-backend:server');
const http = require('http');
const db = require('../config/db');
const { Server } = require('socket.io');
const jwt = require('jsonwebtoken');
const Message = require(`../models/Message`);
const User = require(`../models/User`);

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Create Socket.io server.
 */

const io = new Server(server, {
  cors: {
    origin: process.env.CLIENT_URL || "http://localhost:3000",
    methods: ["GET", "POST"],
    credentials: true
  }
});

io.use((socket, next) => {
  const token = socket.handshake.auth.token;
  if (!token) {
    return next(new Error('Authentication error: No token provided'));
  }
  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
    if (err) {
      return next(new Error('Authentication error: Invalid token'));
    }
    socket.user = decoded;
    next();
  });
});

const users = {};

io.on('connection', async (socket) => {

  const user = await User.findById(socket.user.id);

  users[socket.id] = user;

  console.log('User connected:', user);

  io.emit('online users', Object.values(users));


  socket.emit('user connected', {
    userId: socket.user.id
  });

  socket.on('join channel', (channelId) => {
    socket.currentChannelId = channelId;
  });


  socket.on('chat message', async (msg) => {

    if (!socket.currentChannelId) {
      socket.emit('error', { message: 'No channel selected.' });
      return;
    }

    try {
      const message = new Message({
        user: socket.user.id,
        content: msg,
        channelId: socket.currentChannelId,
      });
      await message.save();


      io.emit('chat message', {
        userId: socket.user.id,
        userName: user.email.split(`@`)[0],
        content: msg,
        channelId: socket.currentChannelId,
        timestamp: message.timestamp
      });
    } catch (err) {
      console.error('Error saving message:', err);
      socket.emit('error', { message: 'Message could not be saved.' });
    }
  });

  socket.on('disconnect', () => {
    console.log('A user disconnected:', socket.user);

    delete users[socket.id];
    io.emit('online users', Object.values(users));
    console.log('Online users:', Object.values(users));
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Server is listening on', bind);
}

